
rvm4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000dfa  00000e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dfa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000ebe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f1c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e29  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bd2  00000000  00000000  00002e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000df0  00000000  00000000  00003a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002dc  00000000  00000000  00004860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005df  00000000  00000000  00004b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000153d  00000000  00000000  0000511b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00006658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  8e:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCDBusyLoop>:
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	87 78       	andi	r24, 0x87	; 135
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	59 9a       	sbi	0x0b, 1	; 11
  9e:	5a 98       	cbi	0x0b, 2	; 11
  a0:	00 00       	nop
  a2:	5b 9a       	sbi	0x0b, 3	; 11
  a4:	00 00       	nop
  a6:	89 b1       	in	r24, 0x09	; 9
  a8:	86 95       	lsr	r24
  aa:	86 95       	lsr	r24
  ac:	86 95       	lsr	r24
  ae:	82 95       	swap	r24
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	00 00       	nop
  b4:	5b 98       	cbi	0x0b, 3	; 11
  b6:	00 00       	nop
  b8:	5b 9a       	sbi	0x0b, 3	; 11
  ba:	00 00       	nop
  bc:	99 b1       	in	r25, 0x09	; 9
  be:	00 00       	nop
  c0:	5b 98       	cbi	0x0b, 3	; 11
  c2:	00 00       	nop
  c4:	88 23       	and	r24, r24
  c6:	6c f3       	brlt	.-38     	; 0xa2 <LCDBusyLoop+0xc>
  c8:	59 98       	cbi	0x0b, 1	; 11
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	88 67       	ori	r24, 0x78	; 120
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <LCDByte>:
  d2:	98 2f       	mov	r25, r24
  d4:	92 95       	swap	r25
  d6:	9f 70       	andi	r25, 0x0F	; 15
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	61 11       	cpse	r22, r1
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <LCDByte+0x10>
  de:	5a 98       	cbi	0x0b, 2	; 11
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <LCDByte+0x12>
  e2:	5a 9a       	sbi	0x0b, 2	; 11
  e4:	00 00       	nop
  e6:	5b 9a       	sbi	0x0b, 3	; 11
  e8:	2b b1       	in	r18, 0x0b	; 11
  ea:	27 78       	andi	r18, 0x87	; 135
  ec:	99 0f       	add	r25, r25
  ee:	99 0f       	add	r25, r25
  f0:	99 0f       	add	r25, r25
  f2:	92 2b       	or	r25, r18
  f4:	9b b9       	out	0x0b, r25	; 11
  f6:	00 00       	nop
  f8:	5b 98       	cbi	0x0b, 3	; 11
  fa:	00 00       	nop
  fc:	5b 9a       	sbi	0x0b, 3	; 11
  fe:	9b b1       	in	r25, 0x0b	; 11
 100:	97 78       	andi	r25, 0x87	; 135
 102:	88 0f       	add	r24, r24
 104:	88 0f       	add	r24, r24
 106:	88 0f       	add	r24, r24
 108:	89 2b       	or	r24, r25
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	00 00       	nop
 10e:	5b 98       	cbi	0x0b, 3	; 11
 110:	00 00       	nop
 112:	0e 94 4b 00 	call	0x96	; 0x96 <LCDBusyLoop>
 116:	08 95       	ret

00000118 <LCDWriteString>:
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	8c 01       	movw	r16, r24
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	88 23       	and	r24, r24
 128:	09 f1       	breq	.+66     	; 0x16c <LCDWriteString+0x54>
 12a:	85 32       	cpi	r24, 0x25	; 37
 12c:	a9 f4       	brne	.+42     	; 0x158 <LCDWriteString+0x40>
 12e:	e8 01       	movw	r28, r16
 130:	21 96       	adiw	r28, 0x01	; 1
 132:	f8 01       	movw	r30, r16
 134:	81 81       	ldd	r24, Z+1	; 0x01
 136:	80 53       	subi	r24, 0x30	; 48
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	20 f4       	brcc	.+8      	; 0x144 <LCDWriteString+0x2c>
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDByte>
 142:	0e c0       	rjmp	.+28     	; 0x160 <LCDWriteString+0x48>
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	85 e2       	ldi	r24, 0x25	; 37
 148:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDByte>
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	f8 01       	movw	r30, r16
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDByte>
 156:	04 c0       	rjmp	.+8      	; 0x160 <LCDWriteString+0x48>
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDByte>
 15e:	e8 01       	movw	r28, r16
 160:	8e 01       	movw	r16, r28
 162:	0f 5f       	subi	r16, 0xFF	; 255
 164:	1f 4f       	sbci	r17, 0xFF	; 255
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	81 11       	cpse	r24, r1
 16a:	df cf       	rjmp	.-66     	; 0x12a <LCDWriteString+0x12>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 176:	84 31       	cpi	r24, 0x14	; 20
 178:	78 f4       	brcc	.+30     	; 0x198 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 17a:	62 30       	cpi	r22, 0x02	; 2
 17c:	31 f0       	breq	.+12     	; 0x18a <LCDGotoXY+0x14>
 17e:	63 30       	cpi	r22, 0x03	; 3
 180:	31 f0       	breq	.+12     	; 0x18e <LCDGotoXY+0x18>
 182:	61 30       	cpi	r22, 0x01	; 1
 184:	29 f4       	brne	.+10     	; 0x190 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 186:	80 64       	ori	r24, 0x40	; 64
			break;
 188:	03 c0       	rjmp	.+6      	; 0x190 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 18a:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 18c:	01 c0       	rjmp	.+2      	; 0x190 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 18e:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	80 68       	ori	r24, 0x80	; 128
 194:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDByte>
 198:	08 95       	ret

0000019a <LCD_Command>:

void LCD_Cursor(unsigned char x, unsigned char y)
{
	unsigned char firstcharadd[]={0x80, 0xC0};
	LCD_Command(firstcharadd[y] + x);
}
 19a:	9b b1       	in	r25, 0x0b	; 11
 19c:	9f 70       	andi	r25, 0x0F	; 15
 19e:	28 2f       	mov	r18, r24
 1a0:	20 7f       	andi	r18, 0xF0	; 240
 1a2:	92 2b       	or	r25, r18
 1a4:	9b b9       	out	0x0b, r25	; 11
 1a6:	44 98       	cbi	0x08, 4	; 8
 1a8:	45 9a       	sbi	0x08, 5	; 8
 1aa:	32 e0       	ldi	r19, 0x02	; 2
 1ac:	3a 95       	dec	r19
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_Command+0x12>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_Command+0x18>
 1b2:	45 98       	cbi	0x08, 5	; 8
 1b4:	e7 ec       	ldi	r30, 0xC7	; 199
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Command+0x1e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Command+0x24>
 1be:	00 00       	nop
 1c0:	2b b1       	in	r18, 0x0b	; 11
 1c2:	2f 70       	andi	r18, 0x0F	; 15
 1c4:	f0 e1       	ldi	r31, 0x10	; 16
 1c6:	8f 9f       	mul	r24, r31
 1c8:	c0 01       	movw	r24, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	82 2b       	or	r24, r18
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	45 9a       	sbi	0x08, 5	; 8
 1d2:	32 e0       	ldi	r19, 0x02	; 2
 1d4:	3a 95       	dec	r19
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_Command+0x3a>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_Command+0x40>
 1da:	45 98       	cbi	0x08, 5	; 8
 1dc:	8f ec       	ldi	r24, 0xCF	; 207
 1de:	97 e0       	ldi	r25, 0x07	; 7
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_Command+0x46>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_Command+0x4c>
 1e6:	00 00       	nop
 1e8:	08 95       	ret

000001ea <LCD_Data>:
 1ea:	9b b1       	in	r25, 0x0b	; 11
 1ec:	9f 70       	andi	r25, 0x0F	; 15
 1ee:	28 2f       	mov	r18, r24
 1f0:	20 7f       	andi	r18, 0xF0	; 240
 1f2:	92 2b       	or	r25, r18
 1f4:	9b b9       	out	0x0b, r25	; 11
 1f6:	44 9a       	sbi	0x08, 4	; 8
 1f8:	45 9a       	sbi	0x08, 5	; 8
 1fa:	e7 ec       	ldi	r30, 0xC7	; 199
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_Data+0x14>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_Data+0x1a>
 204:	00 00       	nop
 206:	45 98       	cbi	0x08, 5	; 8
 208:	e7 ec       	ldi	r30, 0xC7	; 199
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_Data+0x22>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_Data+0x28>
 212:	00 00       	nop
 214:	2b b1       	in	r18, 0x0b	; 11
 216:	2f 70       	andi	r18, 0x0F	; 15
 218:	f0 e1       	ldi	r31, 0x10	; 16
 21a:	8f 9f       	mul	r24, r31
 21c:	c0 01       	movw	r24, r0
 21e:	11 24       	eor	r1, r1
 220:	82 2b       	or	r24, r18
 222:	8b b9       	out	0x0b, r24	; 11
 224:	45 9a       	sbi	0x08, 5	; 8
 226:	87 ec       	ldi	r24, 0xC7	; 199
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_Data+0x40>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_Data+0x46>
 230:	00 00       	nop
 232:	45 98       	cbi	0x08, 5	; 8
 234:	ef ec       	ldi	r30, 0xCF	; 207
 236:	f7 e0       	ldi	r31, 0x07	; 7
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_Data+0x4e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_Data+0x54>
 23e:	00 00       	nop
 240:	08 95       	ret

00000242 <LCD_Init>:
 242:	87 b1       	in	r24, 0x07	; 7
 244:	80 63       	ori	r24, 0x30	; 48
 246:	87 b9       	out	0x07, r24	; 7
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	8f 7c       	andi	r24, 0xCF	; 207
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	8a b1       	in	r24, 0x0a	; 10
 250:	80 6f       	ori	r24, 0xF0	; 240
 252:	8a b9       	out	0x0a, r24	; 10
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	8f 70       	andi	r24, 0x0F	; 15
 258:	8b b9       	out	0x0b, r24	; 11
 25a:	8f e3       	ldi	r24, 0x3F	; 63
 25c:	9c e9       	ldi	r25, 0x9C	; 156
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_Init+0x1c>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_Init+0x22>
 264:	00 00       	nop
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Command>
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Command>
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Command>
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Command>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Command>
 284:	8f ec       	ldi	r24, 0xCF	; 207
 286:	97 e0       	ldi	r25, 0x07	; 7
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_Init+0x46>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_Init+0x4c>
 28e:	00 00       	nop
 290:	08 95       	ret

00000292 <LCD_String>:
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
 298:	88 81       	ld	r24, Y
 29a:	88 23       	and	r24, r24
 29c:	31 f0       	breq	.+12     	; 0x2aa <LCD_String+0x18>
 29e:	21 96       	adiw	r28, 0x01	; 1
 2a0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Data>
 2a4:	89 91       	ld	r24, Y+
 2a6:	81 11       	cpse	r24, r1
 2a8:	fb cf       	rjmp	.-10     	; 0x2a0 <LCD_String+0xe>
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <LCD_Clear>:
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Command>
 2b6:	8f ec       	ldi	r24, 0xCF	; 207
 2b8:	97 e0       	ldi	r25, 0x07	; 7
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_Clear+0xa>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_Clear+0x10>
 2c0:	00 00       	nop
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Command>
 2c8:	08 95       	ret

000002ca <main>:

int main(void)
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	65 97       	sbiw	r28, 0x15	; 21
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	2f e7       	ldi	r18, 0x7F	; 127
 2e0:	88 e3       	ldi	r24, 0x38	; 56
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x1a>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x24>
 2ee:	00 00       	nop
	char buffer[5];
	uint8_t byte;
	uint8_t str[MAX_LEN];
	_delay_ms(50);
	LCD_Init();
 2f0:	0e 94 21 01 	call	0x242	; 0x242 <LCD_Init>
	LCD_String("RFID Reader");
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 49 01 	call	0x292	; 0x292 <LCD_String>
	//LCDWriteStringXY(5,1,VERSION_STR);
	
	
	spi_init();
 2fc:	0e 94 06 04 	call	0x80c	; 0x80c <spi_init>
 300:	ef ef       	ldi	r30, 0xFF	; 255
 302:	f9 e6       	ldi	r31, 0x69	; 105
 304:	28 e1       	ldi	r18, 0x18	; 24
 306:	e1 50       	subi	r30, 0x01	; 1
 308:	f0 40       	sbci	r31, 0x00	; 0
 30a:	20 40       	sbci	r18, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x3c>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x46>
 310:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
 312:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_Clear>
	
	//init reader
	mfrc522_init();
 316:	0e 94 45 02 	call	0x48a	; 0x48a <mfrc522_init>
	
	//check version of the reader
	byte = mfrc522_read(VersionReg);
 31a:	87 e3       	ldi	r24, 0x37	; 55
 31c:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
	if(byte == 0x92)
 320:	82 39       	cpi	r24, 0x92	; 146
 322:	61 f4       	brne	.+24     	; 0x33c <main+0x72>
	{
		LCD_String("MIFARE RC522v2");
 324:	8c e0       	ldi	r24, 0x0C	; 12
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 49 01 	call	0x292	; 0x292 <LCD_String>
		LCD_Command(0xC0);
 32c:	80 ec       	ldi	r24, 0xC0	; 192
 32e:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Command>
		LCD_String("Detected");
 332:	8b e1       	ldi	r24, 0x1B	; 27
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 49 01 	call	0x292	; 0x292 <LCD_String>
 33a:	13 c0       	rjmp	.+38     	; 0x362 <main+0x98>
	}else if(byte == 0x91 || byte==0x90)
 33c:	80 59       	subi	r24, 0x90	; 144
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	60 f4       	brcc	.+24     	; 0x35a <main+0x90>
	{
		LCD_String("MIFARE RC522v1");
 342:	84 e2       	ldi	r24, 0x24	; 36
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 49 01 	call	0x292	; 0x292 <LCD_String>
		LCD_Command(0xC0);
 34a:	80 ec       	ldi	r24, 0xC0	; 192
 34c:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Command>
		LCD_String("Detected");
 350:	8b e1       	ldi	r24, 0x1B	; 27
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 49 01 	call	0x292	; 0x292 <LCD_String>
 358:	04 c0       	rjmp	.+8      	; 0x362 <main+0x98>
	}else
	{
		LCD_String("No reader found");
 35a:	83 e3       	ldi	r24, 0x33	; 51
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 49 01 	call	0x292	; 0x292 <LCD_String>
	}
	
	byte = mfrc522_read(ComIEnReg);
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20);
 368:	68 2f       	mov	r22, r24
 36a:	60 62       	ori	r22, 0x20	; 32
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
	byte = mfrc522_read(DivIEnReg);
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80);
 378:	68 2f       	mov	r22, r24
 37a:	60 68       	ori	r22, 0x80	; 128
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	9e e9       	ldi	r25, 0x9E	; 158
 386:	e4 e2       	ldi	r30, 0x24	; 36
 388:	81 50       	subi	r24, 0x01	; 1
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e0 40       	sbci	r30, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <main+0xbe>
 390:	00 c0       	rjmp	.+0      	; 0x392 <main+0xc8>
 392:	00 00       	nop
	
	_delay_ms(1500);
	LCD_Clear();
 394:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_Clear>
 398:	4e 01       	movw	r8, r28
 39a:	fe e0       	ldi	r31, 0x0E	; 14
 39c:	8f 0e       	add	r8, r31
 39e:	91 1c       	adc	r9, r1
			byte = mfrc522_get_card_serial(str);
			if(byte == CARD_FOUND)
			{
				for(byte=0;byte<8;byte++)
				{
					sprintf(buffer,"%u",str[byte]);
 3a0:	0f 2e       	mov	r0, r31
 3a2:	f5 e4       	ldi	r31, 0x45	; 69
 3a4:	ef 2e       	mov	r14, r31
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	ff 2e       	mov	r15, r31
 3aa:	f0 2d       	mov	r31, r0
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	6c 01       	movw	r12, r24
 3b2:	a8 2e       	mov	r10, r24
 3b4:	bd 2c       	mov	r11, r13
	
	_delay_ms(1500);
	LCD_Clear();
	
	while(1){
		byte = mfrc522_request(PICC_REQALL,str);
 3b6:	be 01       	movw	r22, r28
 3b8:	6a 5f       	subi	r22, 0xFA	; 250
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	82 e5       	ldi	r24, 0x52	; 82
 3be:	0e 94 9a 03 	call	0x734	; 0x734 <mfrc522_request>
		//sprintf(buffer,"%u",byte);
		//LCDHexDumpXY(0,0,byte);
		
		if(byte == CARD_FOUND)
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	b9 f5       	brne	.+110    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		{
			LCD_String("q");
 3c6:	83 e4       	ldi	r24, 0x43	; 67
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 49 01 	call	0x292	; 0x292 <LCD_String>
			byte = mfrc522_get_card_serial(str);
 3ce:	ce 01       	movw	r24, r28
 3d0:	06 96       	adiw	r24, 0x06	; 6
 3d2:	0e 94 ce 03 	call	0x79c	; 0x79c <mfrc522_get_card_serial>
			if(byte == CARD_FOUND)
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	29 f5       	brne	.+74     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3da:	8e 01       	movw	r16, r28
 3dc:	0a 5f       	subi	r16, 0xFA	; 250
 3de:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				for(byte=0;byte<8;byte++)
				{
					sprintf(buffer,"%u",str[byte]);
 3e0:	f8 01       	movw	r30, r16
 3e2:	81 91       	ld	r24, Z+
 3e4:	8f 01       	movw	r16, r30
 3e6:	1f 92       	push	r1
 3e8:	8f 93       	push	r24
 3ea:	ff 92       	push	r15
 3ec:	ef 92       	push	r14
 3ee:	df 92       	push	r13
 3f0:	cf 92       	push	r12
 3f2:	0e 94 11 04 	call	0x822	; 0x822 <sprintf>
					LCD_String(buffer);					
 3f6:	8a 2d       	mov	r24, r10
 3f8:	9b 2d       	mov	r25, r11
 3fa:	0e 94 49 01 	call	0x292	; 0x292 <LCD_String>
		{
			LCD_String("q");
			byte = mfrc522_get_card_serial(str);
			if(byte == CARD_FOUND)
			{
				for(byte=0;byte<8;byte++)
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	08 15       	cp	r16, r8
 40c:	19 05       	cpc	r17, r9
 40e:	41 f7       	brne	.-48     	; 0x3e0 <main+0x116>
 410:	ff ef       	ldi	r31, 0xFF	; 255
 412:	28 e0       	ldi	r18, 0x08	; 8
 414:	8d e3       	ldi	r24, 0x3D	; 61
 416:	f1 50       	subi	r31, 0x01	; 1
 418:	20 40       	sbci	r18, 0x00	; 0
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	00 00       	nop
 422:	08 c0       	rjmp	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				}
				_delay_ms(2500);
			}
			else
			{
				LCDWriteStringXY(0,1,"Error");
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 bb 00 	call	0x176	; 0x176 <LCDGotoXY>
 42c:	88 e4       	ldi	r24, 0x48	; 72
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 8c 00 	call	0x118	; 0x118 <LCDWriteString>
			}
		}
		LCD_String("o");
 434:	8e e4       	ldi	r24, 0x4E	; 78
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 49 01 	call	0x292	; 0x292 <LCD_String>
 43c:	9f ef       	ldi	r25, 0xFF	; 255
 43e:	e9 e6       	ldi	r30, 0x69	; 105
 440:	f8 e1       	ldi	r31, 0x18	; 24
 442:	91 50       	subi	r25, 0x01	; 1
 444:	e0 40       	sbci	r30, 0x00	; 0
 446:	f0 40       	sbci	r31, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
 44e:	b3 cf       	rjmp	.-154    	; 0x3b6 <main+0xec>

00000450 <mfrc522_write>:
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
	ENABLE_CHIP();
	spi_transmit((reg<<1)&0x7E);
 450:	cf 93       	push	r28
 452:	c6 2f       	mov	r28, r22
	spi_transmit(data);
 454:	2a 98       	cbi	0x05, 2	; 5
	DISABLE_CHIP();
 456:	88 0f       	add	r24, r24
 458:	8e 77       	andi	r24, 0x7E	; 126
 45a:	0e 94 0b 04 	call	0x816	; 0x816 <spi_transmit>
}
 45e:	8c 2f       	mov	r24, r28
 460:	0e 94 0b 04 	call	0x816	; 0x816 <spi_transmit>

 464:	2a 9a       	sbi	0x05, 2	; 5
uint8_t mfrc522_read(uint8_t reg)
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <mfrc522_read>:
{
	uint8_t data;	
	ENABLE_CHIP();
	spi_transmit(((reg<<1)&0x7E)|0x80);
	data = spi_transmit(0x00);
 46a:	2a 98       	cbi	0x05, 2	; 5
	DISABLE_CHIP();
 46c:	88 0f       	add	r24, r24
 46e:	8e 77       	andi	r24, 0x7E	; 126
 470:	80 68       	ori	r24, 0x80	; 128
 472:	0e 94 0b 04 	call	0x816	; 0x816 <spi_transmit>
	return data;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 0b 04 	call	0x816	; 0x816 <spi_transmit>
}
 47c:	2a 9a       	sbi	0x05, 2	; 5

void mfrc522_reset()
 47e:	08 95       	ret

00000480 <mfrc522_reset>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

 480:	6f e0       	ldi	r22, 0x0F	; 15
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
 488:	08 95       	ret

0000048a <mfrc522_init>:
void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
	
	mfrc522_write(TModeReg, 0x8D);
 48a:	0e 94 40 02 	call	0x480	; 0x480 <mfrc522_reset>
    mfrc522_write(TPrescalerReg, 0x3E);
    mfrc522_write(TReloadReg_1, 30);   
 48e:	6d e8       	ldi	r22, 0x8D	; 141
 490:	8a e2       	ldi	r24, 0x2A	; 42
 492:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 496:	6e e3       	ldi	r22, 0x3E	; 62
 498:	8b e2       	ldi	r24, 0x2B	; 43
 49a:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 49e:	6e e1       	ldi	r22, 0x1E	; 30
 4a0:	8c e2       	ldi	r24, 0x2C	; 44
 4a2:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	8d e2       	ldi	r24, 0x2D	; 45
 4aa:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
	
 4ae:	60 e4       	ldi	r22, 0x40	; 64
 4b0:	85 e1       	ldi	r24, 0x15	; 21
 4b2:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
	byte = mfrc522_read(TxControlReg);
 4b6:	6d e3       	ldi	r22, 0x3D	; 61
 4b8:	81 e1       	ldi	r24, 0x11	; 17
 4ba:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
	if(!(byte&0x03))
	{
 4be:	84 e1       	ldi	r24, 0x14	; 20
 4c0:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
		mfrc522_write(TxControlReg,byte|0x03);
 4c4:	98 2f       	mov	r25, r24
 4c6:	93 70       	andi	r25, 0x03	; 3
 4c8:	29 f4       	brne	.+10     	; 0x4d4 <mfrc522_init+0x4a>
	}
}
 4ca:	68 2f       	mov	r22, r24
 4cc:	63 60       	ori	r22, 0x03	; 3
 4ce:	84 e1       	ldi	r24, 0x14	; 20
 4d0:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
 4d4:	08 95       	ret

000004d6 <mfrc522_to_card>:
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 4d6:	3f 92       	push	r3
 4d8:	4f 92       	push	r4
 4da:	5f 92       	push	r5
 4dc:	6f 92       	push	r6
 4de:	7f 92       	push	r7
 4e0:	8f 92       	push	r8
 4e2:	9f 92       	push	r9
 4e4:	af 92       	push	r10
 4e6:	bf 92       	push	r11
 4e8:	cf 92       	push	r12
 4ea:	df 92       	push	r13
 4ec:	ef 92       	push	r14
 4ee:	ff 92       	push	r15
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	98 2e       	mov	r9, r24
 4fa:	f6 2e       	mov	r15, r22
 4fc:	e7 2e       	mov	r14, r23
 4fe:	44 2e       	mov	r4, r20
 500:	82 2e       	mov	r8, r18
 502:	33 2e       	mov	r3, r19
 504:	58 01       	movw	r10, r16
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
 506:	8c e0       	ldi	r24, 0x0C	; 12
 508:	98 16       	cp	r9, r24
 50a:	09 f4       	brne	.+2      	; 0x50e <mfrc522_to_card+0x38>
 50c:	c9 c0       	rjmp	.+402    	; 0x6a0 <mfrc522_to_card+0x1ca>
 50e:	ee e0       	ldi	r30, 0x0E	; 14
 510:	9e 12       	cpse	r9, r30
 512:	03 c0       	rjmp	.+6      	; 0x51a <mfrc522_to_card+0x44>
		{
			irqEn = 0x12;
			waitIRq = 0x10;
			break;
		}
 514:	10 e1       	ldi	r17, 0x10	; 16
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
			break;
 516:	02 e1       	ldi	r16, 0x12	; 18
 518:	02 c0       	rjmp	.+4      	; 0x51e <mfrc522_to_card+0x48>
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
    uint8_t lastBits;
    uint8_t n;
 51a:	10 e0       	ldi	r17, 0x00	; 0
uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
    uint8_t lastBits;
 51c:	00 e0       	ldi	r16, 0x00	; 0
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
    n=mfrc522_read(FIFOLevelReg);
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 524:	68 2f       	mov	r22, r24
 526:	6f 77       	andi	r22, 0x7F	; 127
 528:	84 e0       	ldi	r24, 0x04	; 4
 52a:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
    
 52e:	8a e0       	ldi	r24, 0x0A	; 10
 530:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 534:	68 2f       	mov	r22, r24
 536:	60 68       	ori	r22, 0x80	; 128
 538:	8a e0       	ldi	r24, 0x0A	; 10
 53a:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>

	//Writing data to the FIFO
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
    for (i=0; i<send_data_len; i++)
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 546:	51 2c       	mov	r5, r1
 548:	61 2c       	mov	r6, r1
 54a:	71 2c       	mov	r7, r1
 54c:	41 14       	cp	r4, r1
 54e:	51 04       	cpc	r5, r1
 550:	61 04       	cpc	r6, r1
 552:	71 04       	cpc	r7, r1
 554:	19 f4       	brne	.+6      	; 0x55c <mfrc522_to_card+0x86>
 556:	15 c0       	rjmp	.+42     	; 0x582 <mfrc522_to_card+0xac>
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
		}
 558:	10 e3       	ldi	r17, 0x30	; 48
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
 55a:	07 e7       	ldi	r16, 0x77	; 119
 55c:	cf 2d       	mov	r28, r15
 55e:	de 2d       	mov	r29, r14
 560:	c1 2c       	mov	r12, r1
 562:	d1 2c       	mov	r13, r1
 564:	76 01       	movw	r14, r12
	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

 566:	69 91       	ld	r22, Y+
 568:	89 e0       	ldi	r24, 0x09	; 9
 56a:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 56e:	ff ef       	ldi	r31, 0xFF	; 255
 570:	cf 1a       	sub	r12, r31
 572:	df 0a       	sbc	r13, r31
 574:	ef 0a       	sbc	r14, r31
 576:	ff 0a       	sbc	r15, r31
 578:	c4 14       	cp	r12, r4
 57a:	d5 04       	cpc	r13, r5
 57c:	e6 04       	cpc	r14, r6
 57e:	f7 04       	cpc	r15, r7
 580:	90 f3       	brcs	.-28     	; 0x566 <mfrc522_to_card+0x90>
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
    if (cmd == Transceive_CMD)
    {    
 582:	69 2d       	mov	r22, r9
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
		n=mfrc522_read(BitFramingReg);
 58a:	8c e0       	ldi	r24, 0x0C	; 12
 58c:	98 12       	cpse	r9, r24
 58e:	08 c0       	rjmp	.+16     	; 0x5a0 <mfrc522_to_card+0xca>
		mfrc522_write(BitFramingReg,n|0x80);  
	}   
 590:	8d e0       	ldi	r24, 0x0D	; 13
 592:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
    
 596:	68 2f       	mov	r22, r24
 598:	60 68       	ori	r22, 0x80	; 128
 59a:	8d e0       	ldi	r24, 0x0D	; 13
 59c:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
        i--;
    }
 5a0:	84 e0       	ldi	r24, 0x04	; 4
 5a2:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
 5a6:	f8 2e       	mov	r15, r24
 5a8:	c0 e0       	ldi	r28, 0x00	; 0
 5aa:	d0 e0       	ldi	r29, 0x00	; 0
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
 5ac:	11 60       	ori	r17, 0x01	; 1
 5ae:	0a c0       	rjmp	.+20     	; 0x5c4 <mfrc522_to_card+0xee>
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
        i--;
    }
 5b0:	84 e0       	ldi	r24, 0x04	; 4
 5b2:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
 5b6:	f8 2e       	mov	r15, r24
 5b8:	21 96       	adiw	r28, 0x01	; 1
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
 5ba:	cf 3c       	cpi	r28, 0xCF	; 207
 5bc:	e7 e0       	ldi	r30, 0x07	; 7
 5be:	de 07       	cpc	r29, r30
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <mfrc522_to_card+0xee>
 5c2:	8c c0       	rjmp	.+280    	; 0x6dc <mfrc522_to_card+0x206>
 5c4:	81 2f       	mov	r24, r17
 5c6:	8f 21       	and	r24, r15
 5c8:	99 f3       	breq	.-26     	; 0x5b0 <mfrc522_to_card+0xda>
 5ca:	92 c0       	rjmp	.+292    	; 0x6f0 <mfrc522_to_card+0x21a>
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
 5cc:	01 70       	andi	r16, 0x01	; 1
 5ce:	f0 22       	and	r15, r16
 5d0:	11 f0       	breq	.+4      	; 0x5d6 <mfrc522_to_card+0x100>
			}

 5d2:	c2 e0       	ldi	r28, 0x02	; 2
 5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <mfrc522_to_card+0x102>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
            {   
 5d6:	c1 e0       	ldi	r28, 0x01	; 1
				status = CARD_NOT_FOUND;			//??   
			}

            if (cmd == Transceive_CMD)
            {
               	n = mfrc522_read(FIFOLevelReg);
 5d8:	fc e0       	ldi	r31, 0x0C	; 12
 5da:	9f 12       	cpse	r9, r31
 5dc:	98 c0       	rjmp	.+304    	; 0x70e <mfrc522_to_card+0x238>
              	lastBits = mfrc522_read(ControlReg) & 0x07;
                if (lastBits)
 5de:	8a e0       	ldi	r24, 0x0A	; 10
 5e0:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
 5e4:	48 2e       	mov	r4, r24
                {   
 5e6:	8c e0       	ldi	r24, 0x0C	; 12
 5e8:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
 5ec:	28 2f       	mov	r18, r24
 5ee:	27 70       	andi	r18, 0x07	; 7
					*back_data_len = (n-1)*8 + lastBits;   
 5f0:	a9 f0       	breq	.+42     	; 0x61c <mfrc522_to_card+0x146>
				}
                else
 5f2:	84 2d       	mov	r24, r4
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	82 0f       	add	r24, r18
 606:	91 1d       	adc	r25, r1
 608:	09 2e       	mov	r0, r25
 60a:	00 0c       	add	r0, r0
 60c:	aa 0b       	sbc	r26, r26
 60e:	bb 0b       	sbc	r27, r27
 610:	f5 01       	movw	r30, r10
 612:	80 83       	st	Z, r24
 614:	91 83       	std	Z+1, r25	; 0x01
 616:	a2 83       	std	Z+2, r26	; 0x02
 618:	b3 83       	std	Z+3, r27	; 0x03
 61a:	11 c0       	rjmp	.+34     	; 0x63e <mfrc522_to_card+0x168>
                {   
					*back_data_len = n*8;   
				}

 61c:	84 2d       	mov	r24, r4
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	09 2e       	mov	r0, r25
 62e:	00 0c       	add	r0, r0
 630:	aa 0b       	sbc	r26, r26
 632:	bb 0b       	sbc	r27, r27
 634:	f5 01       	movw	r30, r10
 636:	80 83       	st	Z, r24
 638:	91 83       	std	Z+1, r25	; 0x01
 63a:	a2 83       	std	Z+2, r26	; 0x02
 63c:	b3 83       	std	Z+3, r27	; 0x03
                if (n == 0)
                {   
					n = 1;    
 63e:	44 20       	and	r4, r4
 640:	71 f0       	breq	.+28     	; 0x65e <mfrc522_to_card+0x188>
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 642:	84 2d       	mov	r24, r4
 644:	81 31       	cpi	r24, 0x11	; 17
 646:	08 f0       	brcs	.+2      	; 0x64a <mfrc522_to_card+0x174>
 648:	80 e1       	ldi	r24, 0x10	; 16
 64a:	48 2e       	mov	r4, r24
 64c:	51 2c       	mov	r5, r1
 64e:	61 2c       	mov	r6, r1
 650:	71 2c       	mov	r7, r1
 652:	41 14       	cp	r4, r1
 654:	51 04       	cpc	r5, r1
 656:	61 04       	cpc	r6, r1
 658:	71 04       	cpc	r7, r1
 65a:	29 f4       	brne	.+10     	; 0x666 <mfrc522_to_card+0x190>
 65c:	58 c0       	rjmp	.+176    	; 0x70e <mfrc522_to_card+0x238>
 65e:	41 2c       	mov	r4, r1
 660:	51 2c       	mov	r5, r1
 662:	32 01       	movw	r6, r4
 664:	43 94       	inc	r4
 666:	08 2d       	mov	r16, r8
 668:	13 2d       	mov	r17, r3
 66a:	c1 2c       	mov	r12, r1
 66c:	d1 2c       	mov	r13, r1
 66e:	76 01       	movw	r14, r12
				}
            }
 670:	89 e0       	ldi	r24, 0x09	; 9
 672:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
 676:	f8 01       	movw	r30, r16
 678:	81 93       	st	Z+, r24
 67a:	8f 01       	movw	r16, r30
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 67c:	ff ef       	ldi	r31, 0xFF	; 255
 67e:	cf 1a       	sub	r12, r31
 680:	df 0a       	sbc	r13, r31
 682:	ef 0a       	sbc	r14, r31
 684:	ff 0a       	sbc	r15, r31
 686:	c4 14       	cp	r12, r4
 688:	d5 04       	cpc	r13, r5
 68a:	e6 04       	cpc	r14, r6
 68c:	f7 04       	cpc	r15, r7
 68e:	80 f3       	brcs	.-32     	; 0x670 <mfrc522_to_card+0x19a>
 690:	3e c0       	rjmp	.+124    	; 0x70e <mfrc522_to_card+0x238>
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
    if (cmd == Transceive_CMD)
    {    
 692:	6c e0       	ldi	r22, 0x0C	; 12
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
		}
 69a:	10 e3       	ldi	r17, 0x30	; 48
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
 69c:	07 e7       	ldi	r16, 0x77	; 119
 69e:	78 cf       	rjmp	.-272    	; 0x590 <mfrc522_to_card+0xba>
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
    n=mfrc522_read(FIFOLevelReg);
 6a0:	84 e0       	ldi	r24, 0x04	; 4
 6a2:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 6a6:	68 2f       	mov	r22, r24
 6a8:	6f 77       	andi	r22, 0x7F	; 127
 6aa:	84 e0       	ldi	r24, 0x04	; 4
 6ac:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
    
 6b0:	8a e0       	ldi	r24, 0x0A	; 10
 6b2:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 6b6:	68 2f       	mov	r22, r24
 6b8:	60 68       	ori	r22, 0x80	; 128
 6ba:	8a e0       	ldi	r24, 0x0A	; 10
 6bc:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>

	//Writing data to the FIFO
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
    for (i=0; i<send_data_len; i++)
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 6c8:	51 2c       	mov	r5, r1
 6ca:	61 2c       	mov	r6, r1
 6cc:	71 2c       	mov	r7, r1
 6ce:	41 14       	cp	r4, r1
 6d0:	51 04       	cpc	r5, r1
 6d2:	61 04       	cpc	r6, r1
 6d4:	71 04       	cpc	r7, r1
 6d6:	09 f0       	breq	.+2      	; 0x6da <mfrc522_to_card+0x204>
 6d8:	3f cf       	rjmp	.-386    	; 0x558 <mfrc522_to_card+0x82>
 6da:	db cf       	rjmp	.-74     	; 0x692 <mfrc522_to_card+0x1bc>
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
	
 6dc:	8d e0       	ldi	r24, 0x0D	; 13
 6de:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
    if (i != 0)
 6e2:	68 2f       	mov	r22, r24
 6e4:	6f 77       	andi	r22, 0x7F	; 127
 6e6:	8d e0       	ldi	r24, 0x0D	; 13
 6e8:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 6ec:	c3 e0       	ldi	r28, 0x03	; 3
 6ee:	0f c0       	rjmp	.+30     	; 0x70e <mfrc522_to_card+0x238>
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
	
 6f0:	8d e0       	ldi	r24, 0x0D	; 13
 6f2:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
    if (i != 0)
 6f6:	68 2f       	mov	r22, r24
 6f8:	6f 77       	andi	r22, 0x7F	; 127
 6fa:	8d e0       	ldi	r24, 0x0D	; 13
 6fc:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 700:	86 e0       	ldi	r24, 0x06	; 6
 702:	0e 94 35 02 	call	0x46a	; 0x46a <mfrc522_read>
 706:	8b 71       	andi	r24, 0x1B	; 27
 708:	09 f4       	brne	.+2      	; 0x70c <mfrc522_to_card+0x236>
 70a:	60 cf       	rjmp	.-320    	; 0x5cc <mfrc522_to_card+0xf6>
        }
        else
        {   
			status = ERROR;  
		}
        
 70c:	c3 e0       	ldi	r28, 0x03	; 3
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}


 70e:	8c 2f       	mov	r24, r28
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	1f 91       	pop	r17
 716:	0f 91       	pop	r16
 718:	ff 90       	pop	r15
 71a:	ef 90       	pop	r14
 71c:	df 90       	pop	r13
 71e:	cf 90       	pop	r12
 720:	bf 90       	pop	r11
 722:	af 90       	pop	r10
 724:	9f 90       	pop	r9
 726:	8f 90       	pop	r8
 728:	7f 90       	pop	r7
 72a:	6f 90       	pop	r6
 72c:	5f 90       	pop	r5
 72e:	4f 90       	pop	r4
 730:	3f 90       	pop	r3
 732:	08 95       	ret

00000734 <mfrc522_request>:
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
	uint8_t  status;  
	uint32_t backBits;//The received data bits
 734:	ef 92       	push	r14
 736:	ff 92       	push	r15
 738:	0f 93       	push	r16
 73a:	1f 93       	push	r17
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	00 d0       	rcall	.+0      	; 0x742 <mfrc522_request+0xe>
 742:	00 d0       	rcall	.+0      	; 0x744 <mfrc522_request+0x10>
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	18 2f       	mov	r17, r24
 74a:	7b 01       	movw	r14, r22

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
	
	tag_type[0] = req_mode;
 74c:	67 e0       	ldi	r22, 0x07	; 7
 74e:	8d e0       	ldi	r24, 0x0D	; 13
 750:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);

 754:	f7 01       	movw	r30, r14
 756:	10 83       	st	Z, r17
	if ((status != CARD_FOUND) || (backBits != 0x10))
 758:	8e 01       	movw	r16, r28
 75a:	0f 5f       	subi	r16, 0xFF	; 255
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	97 01       	movw	r18, r14
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	b7 01       	movw	r22, r14
 764:	8c e0       	ldi	r24, 0x0C	; 12
 766:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <mfrc522_to_card>
	{    
		status = ERROR;
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	59 f4       	brne	.+22     	; 0x784 <mfrc522_request+0x50>
 76e:	49 81       	ldd	r20, Y+1	; 0x01
 770:	5a 81       	ldd	r21, Y+2	; 0x02
 772:	6b 81       	ldd	r22, Y+3	; 0x03
 774:	7c 81       	ldd	r23, Y+4	; 0x04
 776:	40 31       	cpi	r20, 0x10	; 16
 778:	51 05       	cpc	r21, r1
 77a:	61 05       	cpc	r22, r1
 77c:	71 05       	cpc	r23, r1
 77e:	19 f0       	breq	.+6      	; 0x786 <mfrc522_request+0x52>
	}
   
 780:	83 e0       	ldi	r24, 0x03	; 3
 782:	01 c0       	rjmp	.+2      	; 0x786 <mfrc522_request+0x52>
 784:	83 e0       	ldi	r24, 0x03	; 3
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	1f 91       	pop	r17
 794:	0f 91       	pop	r16
 796:	ff 90       	pop	r15
 798:	ef 90       	pop	r14
 79a:	08 95       	ret

0000079c <mfrc522_get_card_serial>:


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
	uint8_t status;
    uint8_t i;
 79c:	ef 92       	push	r14
 79e:	ff 92       	push	r15
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	00 d0       	rcall	.+0      	; 0x7aa <mfrc522_get_card_serial+0xe>
 7aa:	00 d0       	rcall	.+0      	; 0x7ac <mfrc522_get_card_serial+0x10>
 7ac:	cd b7       	in	r28, 0x3d	; 61
 7ae:	de b7       	in	r29, 0x3e	; 62
 7b0:	7c 01       	movw	r14, r24
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 
    serial_out[0] = PICC_ANTICOLL;
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	8d e0       	ldi	r24, 0x0D	; 13
 7b6:	0e 94 28 02 	call	0x450	; 0x450 <mfrc522_write>
    serial_out[1] = 0x20;
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 7ba:	83 e9       	ldi	r24, 0x93	; 147
 7bc:	f7 01       	movw	r30, r14
 7be:	80 83       	st	Z, r24

 7c0:	80 e2       	ldi	r24, 0x20	; 32
 7c2:	81 83       	std	Z+1, r24	; 0x01
    if (status == CARD_FOUND)
 7c4:	8e 01       	movw	r16, r28
 7c6:	0f 5f       	subi	r16, 0xFF	; 255
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	97 01       	movw	r18, r14
 7cc:	42 e0       	ldi	r20, 0x02	; 2
 7ce:	b7 01       	movw	r22, r14
 7d0:	8c e0       	ldi	r24, 0x0C	; 12
 7d2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <mfrc522_to_card>
	{
		//Check card serial number
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	71 f4       	brne	.+28     	; 0x7f6 <mfrc522_get_card_serial+0x5a>
 7da:	f7 01       	movw	r30, r14
 7dc:	a7 01       	movw	r20, r14
 7de:	4c 5f       	subi	r20, 0xFC	; 252
 7e0:	5f 4f       	sbci	r21, 0xFF	; 255
 7e2:	90 e0       	ldi	r25, 0x00	; 0
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 7e4:	21 91       	ld	r18, Z+
 7e6:	92 27       	eor	r25, r18
    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 7e8:	4e 17       	cp	r20, r30
 7ea:	5f 07       	cpc	r21, r31
 7ec:	d9 f7       	brne	.-10     	; 0x7e4 <mfrc522_get_card_serial+0x48>
		}
		if (serNumCheck != serial_out[i])
		{   
			status = ERROR;    
 7ee:	f7 01       	movw	r30, r14
 7f0:	24 81       	ldd	r18, Z+4	; 0x04
 7f2:	92 13       	cpse	r25, r18
		}
    }
 7f4:	83 e0       	ldi	r24, 0x03	; 3
    return status;
}
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	1f 91       	pop	r17
 804:	0f 91       	pop	r16
 806:	ff 90       	pop	r15
 808:	ef 90       	pop	r14
 80a:	08 95       	ret

0000080c <spi_init>:
#include "spi.h"

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 80c:	8c e2       	ldi	r24, 0x2C	; 44
 80e:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 810:	81 e5       	ldi	r24, 0x51	; 81
 812:	8c bd       	out	0x2c, r24	; 44
 814:	08 95       	ret

00000816 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 816:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 818:	0d b4       	in	r0, 0x2d	; 45
 81a:	07 fe       	sbrs	r0, 7
 81c:	fd cf       	rjmp	.-6      	; 0x818 <spi_transmit+0x2>
	
	return SPDR;
 81e:	8e b5       	in	r24, 0x2e	; 46
}
 820:	08 95       	ret

00000822 <sprintf>:
 822:	ae e0       	ldi	r26, 0x0E	; 14
 824:	b0 e0       	ldi	r27, 0x00	; 0
 826:	e7 e1       	ldi	r30, 0x17	; 23
 828:	f4 e0       	ldi	r31, 0x04	; 4
 82a:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__prologue_saves__+0x1c>
 82e:	0d 89       	ldd	r16, Y+21	; 0x15
 830:	1e 89       	ldd	r17, Y+22	; 0x16
 832:	86 e0       	ldi	r24, 0x06	; 6
 834:	8c 83       	std	Y+4, r24	; 0x04
 836:	1a 83       	std	Y+2, r17	; 0x02
 838:	09 83       	std	Y+1, r16	; 0x01
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	9f e7       	ldi	r25, 0x7F	; 127
 83e:	9e 83       	std	Y+6, r25	; 0x06
 840:	8d 83       	std	Y+5, r24	; 0x05
 842:	ae 01       	movw	r20, r28
 844:	47 5e       	subi	r20, 0xE7	; 231
 846:	5f 4f       	sbci	r21, 0xFF	; 255
 848:	6f 89       	ldd	r22, Y+23	; 0x17
 84a:	78 8d       	ldd	r23, Y+24	; 0x18
 84c:	ce 01       	movw	r24, r28
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	0e 94 33 04 	call	0x866	; 0x866 <vfprintf>
 854:	ef 81       	ldd	r30, Y+7	; 0x07
 856:	f8 85       	ldd	r31, Y+8	; 0x08
 858:	e0 0f       	add	r30, r16
 85a:	f1 1f       	adc	r31, r17
 85c:	10 82       	st	Z, r1
 85e:	2e 96       	adiw	r28, 0x0e	; 14
 860:	e4 e0       	ldi	r30, 0x04	; 4
 862:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__epilogue_restores__+0x1c>

00000866 <vfprintf>:
 866:	ab e0       	ldi	r26, 0x0B	; 11
 868:	b0 e0       	ldi	r27, 0x00	; 0
 86a:	e9 e3       	ldi	r30, 0x39	; 57
 86c:	f4 e0       	ldi	r31, 0x04	; 4
 86e:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__prologue_saves__>
 872:	6c 01       	movw	r12, r24
 874:	7b 01       	movw	r14, r22
 876:	8a 01       	movw	r16, r20
 878:	fc 01       	movw	r30, r24
 87a:	17 82       	std	Z+7, r1	; 0x07
 87c:	16 82       	std	Z+6, r1	; 0x06
 87e:	83 81       	ldd	r24, Z+3	; 0x03
 880:	81 ff       	sbrs	r24, 1
 882:	cc c1       	rjmp	.+920    	; 0xc1c <__stack+0x31d>
 884:	ce 01       	movw	r24, r28
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	3c 01       	movw	r6, r24
 88a:	f6 01       	movw	r30, r12
 88c:	93 81       	ldd	r25, Z+3	; 0x03
 88e:	f7 01       	movw	r30, r14
 890:	93 fd       	sbrc	r25, 3
 892:	85 91       	lpm	r24, Z+
 894:	93 ff       	sbrs	r25, 3
 896:	81 91       	ld	r24, Z+
 898:	7f 01       	movw	r14, r30
 89a:	88 23       	and	r24, r24
 89c:	09 f4       	brne	.+2      	; 0x8a0 <vfprintf+0x3a>
 89e:	ba c1       	rjmp	.+884    	; 0xc14 <__stack+0x315>
 8a0:	85 32       	cpi	r24, 0x25	; 37
 8a2:	39 f4       	brne	.+14     	; 0x8b2 <vfprintf+0x4c>
 8a4:	93 fd       	sbrc	r25, 3
 8a6:	85 91       	lpm	r24, Z+
 8a8:	93 ff       	sbrs	r25, 3
 8aa:	81 91       	ld	r24, Z+
 8ac:	7f 01       	movw	r14, r30
 8ae:	85 32       	cpi	r24, 0x25	; 37
 8b0:	29 f4       	brne	.+10     	; 0x8bc <vfprintf+0x56>
 8b2:	b6 01       	movw	r22, r12
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 8ba:	e7 cf       	rjmp	.-50     	; 0x88a <vfprintf+0x24>
 8bc:	91 2c       	mov	r9, r1
 8be:	21 2c       	mov	r2, r1
 8c0:	31 2c       	mov	r3, r1
 8c2:	ff e1       	ldi	r31, 0x1F	; 31
 8c4:	f3 15       	cp	r31, r3
 8c6:	d8 f0       	brcs	.+54     	; 0x8fe <vfprintf+0x98>
 8c8:	8b 32       	cpi	r24, 0x2B	; 43
 8ca:	79 f0       	breq	.+30     	; 0x8ea <vfprintf+0x84>
 8cc:	38 f4       	brcc	.+14     	; 0x8dc <vfprintf+0x76>
 8ce:	80 32       	cpi	r24, 0x20	; 32
 8d0:	79 f0       	breq	.+30     	; 0x8f0 <vfprintf+0x8a>
 8d2:	83 32       	cpi	r24, 0x23	; 35
 8d4:	a1 f4       	brne	.+40     	; 0x8fe <vfprintf+0x98>
 8d6:	23 2d       	mov	r18, r3
 8d8:	20 61       	ori	r18, 0x10	; 16
 8da:	1d c0       	rjmp	.+58     	; 0x916 <__stack+0x17>
 8dc:	8d 32       	cpi	r24, 0x2D	; 45
 8de:	61 f0       	breq	.+24     	; 0x8f8 <vfprintf+0x92>
 8e0:	80 33       	cpi	r24, 0x30	; 48
 8e2:	69 f4       	brne	.+26     	; 0x8fe <vfprintf+0x98>
 8e4:	23 2d       	mov	r18, r3
 8e6:	21 60       	ori	r18, 0x01	; 1
 8e8:	16 c0       	rjmp	.+44     	; 0x916 <__stack+0x17>
 8ea:	83 2d       	mov	r24, r3
 8ec:	82 60       	ori	r24, 0x02	; 2
 8ee:	38 2e       	mov	r3, r24
 8f0:	e3 2d       	mov	r30, r3
 8f2:	e4 60       	ori	r30, 0x04	; 4
 8f4:	3e 2e       	mov	r3, r30
 8f6:	2a c0       	rjmp	.+84     	; 0x94c <__stack+0x4d>
 8f8:	f3 2d       	mov	r31, r3
 8fa:	f8 60       	ori	r31, 0x08	; 8
 8fc:	1d c0       	rjmp	.+58     	; 0x938 <__stack+0x39>
 8fe:	37 fc       	sbrc	r3, 7
 900:	2d c0       	rjmp	.+90     	; 0x95c <__stack+0x5d>
 902:	20 ed       	ldi	r18, 0xD0	; 208
 904:	28 0f       	add	r18, r24
 906:	2a 30       	cpi	r18, 0x0A	; 10
 908:	40 f0       	brcs	.+16     	; 0x91a <__stack+0x1b>
 90a:	8e 32       	cpi	r24, 0x2E	; 46
 90c:	b9 f4       	brne	.+46     	; 0x93c <__stack+0x3d>
 90e:	36 fc       	sbrc	r3, 6
 910:	81 c1       	rjmp	.+770    	; 0xc14 <__stack+0x315>
 912:	23 2d       	mov	r18, r3
 914:	20 64       	ori	r18, 0x40	; 64
 916:	32 2e       	mov	r3, r18
 918:	19 c0       	rjmp	.+50     	; 0x94c <__stack+0x4d>
 91a:	36 fe       	sbrs	r3, 6
 91c:	06 c0       	rjmp	.+12     	; 0x92a <__stack+0x2b>
 91e:	8a e0       	ldi	r24, 0x0A	; 10
 920:	98 9e       	mul	r9, r24
 922:	20 0d       	add	r18, r0
 924:	11 24       	eor	r1, r1
 926:	92 2e       	mov	r9, r18
 928:	11 c0       	rjmp	.+34     	; 0x94c <__stack+0x4d>
 92a:	ea e0       	ldi	r30, 0x0A	; 10
 92c:	2e 9e       	mul	r2, r30
 92e:	20 0d       	add	r18, r0
 930:	11 24       	eor	r1, r1
 932:	22 2e       	mov	r2, r18
 934:	f3 2d       	mov	r31, r3
 936:	f0 62       	ori	r31, 0x20	; 32
 938:	3f 2e       	mov	r3, r31
 93a:	08 c0       	rjmp	.+16     	; 0x94c <__stack+0x4d>
 93c:	8c 36       	cpi	r24, 0x6C	; 108
 93e:	21 f4       	brne	.+8      	; 0x948 <__stack+0x49>
 940:	83 2d       	mov	r24, r3
 942:	80 68       	ori	r24, 0x80	; 128
 944:	38 2e       	mov	r3, r24
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0x4d>
 948:	88 36       	cpi	r24, 0x68	; 104
 94a:	41 f4       	brne	.+16     	; 0x95c <__stack+0x5d>
 94c:	f7 01       	movw	r30, r14
 94e:	93 fd       	sbrc	r25, 3
 950:	85 91       	lpm	r24, Z+
 952:	93 ff       	sbrs	r25, 3
 954:	81 91       	ld	r24, Z+
 956:	7f 01       	movw	r14, r30
 958:	81 11       	cpse	r24, r1
 95a:	b3 cf       	rjmp	.-154    	; 0x8c2 <vfprintf+0x5c>
 95c:	98 2f       	mov	r25, r24
 95e:	9f 7d       	andi	r25, 0xDF	; 223
 960:	95 54       	subi	r25, 0x45	; 69
 962:	93 30       	cpi	r25, 0x03	; 3
 964:	28 f4       	brcc	.+10     	; 0x970 <__stack+0x71>
 966:	0c 5f       	subi	r16, 0xFC	; 252
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	9f e3       	ldi	r25, 0x3F	; 63
 96c:	99 83       	std	Y+1, r25	; 0x01
 96e:	0d c0       	rjmp	.+26     	; 0x98a <__stack+0x8b>
 970:	83 36       	cpi	r24, 0x63	; 99
 972:	31 f0       	breq	.+12     	; 0x980 <__stack+0x81>
 974:	83 37       	cpi	r24, 0x73	; 115
 976:	71 f0       	breq	.+28     	; 0x994 <__stack+0x95>
 978:	83 35       	cpi	r24, 0x53	; 83
 97a:	09 f0       	breq	.+2      	; 0x97e <__stack+0x7f>
 97c:	59 c0       	rjmp	.+178    	; 0xa30 <__stack+0x131>
 97e:	21 c0       	rjmp	.+66     	; 0x9c2 <__stack+0xc3>
 980:	f8 01       	movw	r30, r16
 982:	80 81       	ld	r24, Z
 984:	89 83       	std	Y+1, r24	; 0x01
 986:	0e 5f       	subi	r16, 0xFE	; 254
 988:	1f 4f       	sbci	r17, 0xFF	; 255
 98a:	88 24       	eor	r8, r8
 98c:	83 94       	inc	r8
 98e:	91 2c       	mov	r9, r1
 990:	53 01       	movw	r10, r6
 992:	13 c0       	rjmp	.+38     	; 0x9ba <__stack+0xbb>
 994:	28 01       	movw	r4, r16
 996:	f2 e0       	ldi	r31, 0x02	; 2
 998:	4f 0e       	add	r4, r31
 99a:	51 1c       	adc	r5, r1
 99c:	f8 01       	movw	r30, r16
 99e:	a0 80       	ld	r10, Z
 9a0:	b1 80       	ldd	r11, Z+1	; 0x01
 9a2:	36 fe       	sbrs	r3, 6
 9a4:	03 c0       	rjmp	.+6      	; 0x9ac <__stack+0xad>
 9a6:	69 2d       	mov	r22, r9
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__stack+0xb1>
 9ac:	6f ef       	ldi	r22, 0xFF	; 255
 9ae:	7f ef       	ldi	r23, 0xFF	; 255
 9b0:	c5 01       	movw	r24, r10
 9b2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <strnlen>
 9b6:	4c 01       	movw	r8, r24
 9b8:	82 01       	movw	r16, r4
 9ba:	f3 2d       	mov	r31, r3
 9bc:	ff 77       	andi	r31, 0x7F	; 127
 9be:	3f 2e       	mov	r3, r31
 9c0:	16 c0       	rjmp	.+44     	; 0x9ee <__stack+0xef>
 9c2:	28 01       	movw	r4, r16
 9c4:	22 e0       	ldi	r18, 0x02	; 2
 9c6:	42 0e       	add	r4, r18
 9c8:	51 1c       	adc	r5, r1
 9ca:	f8 01       	movw	r30, r16
 9cc:	a0 80       	ld	r10, Z
 9ce:	b1 80       	ldd	r11, Z+1	; 0x01
 9d0:	36 fe       	sbrs	r3, 6
 9d2:	03 c0       	rjmp	.+6      	; 0x9da <__stack+0xdb>
 9d4:	69 2d       	mov	r22, r9
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
 9da:	6f ef       	ldi	r22, 0xFF	; 255
 9dc:	7f ef       	ldi	r23, 0xFF	; 255
 9de:	c5 01       	movw	r24, r10
 9e0:	0e 94 14 06 	call	0xc28	; 0xc28 <strnlen_P>
 9e4:	4c 01       	movw	r8, r24
 9e6:	f3 2d       	mov	r31, r3
 9e8:	f0 68       	ori	r31, 0x80	; 128
 9ea:	3f 2e       	mov	r3, r31
 9ec:	82 01       	movw	r16, r4
 9ee:	33 fc       	sbrc	r3, 3
 9f0:	1b c0       	rjmp	.+54     	; 0xa28 <__stack+0x129>
 9f2:	82 2d       	mov	r24, r2
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	88 16       	cp	r8, r24
 9f8:	99 06       	cpc	r9, r25
 9fa:	b0 f4       	brcc	.+44     	; 0xa28 <__stack+0x129>
 9fc:	b6 01       	movw	r22, r12
 9fe:	80 e2       	ldi	r24, 0x20	; 32
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 a06:	2a 94       	dec	r2
 a08:	f4 cf       	rjmp	.-24     	; 0x9f2 <__stack+0xf3>
 a0a:	f5 01       	movw	r30, r10
 a0c:	37 fc       	sbrc	r3, 7
 a0e:	85 91       	lpm	r24, Z+
 a10:	37 fe       	sbrs	r3, 7
 a12:	81 91       	ld	r24, Z+
 a14:	5f 01       	movw	r10, r30
 a16:	b6 01       	movw	r22, r12
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 a1e:	21 10       	cpse	r2, r1
 a20:	2a 94       	dec	r2
 a22:	21 e0       	ldi	r18, 0x01	; 1
 a24:	82 1a       	sub	r8, r18
 a26:	91 08       	sbc	r9, r1
 a28:	81 14       	cp	r8, r1
 a2a:	91 04       	cpc	r9, r1
 a2c:	71 f7       	brne	.-36     	; 0xa0a <__stack+0x10b>
 a2e:	e8 c0       	rjmp	.+464    	; 0xc00 <__stack+0x301>
 a30:	84 36       	cpi	r24, 0x64	; 100
 a32:	11 f0       	breq	.+4      	; 0xa38 <__stack+0x139>
 a34:	89 36       	cpi	r24, 0x69	; 105
 a36:	41 f5       	brne	.+80     	; 0xa88 <__stack+0x189>
 a38:	f8 01       	movw	r30, r16
 a3a:	37 fe       	sbrs	r3, 7
 a3c:	07 c0       	rjmp	.+14     	; 0xa4c <__stack+0x14d>
 a3e:	60 81       	ld	r22, Z
 a40:	71 81       	ldd	r23, Z+1	; 0x01
 a42:	82 81       	ldd	r24, Z+2	; 0x02
 a44:	93 81       	ldd	r25, Z+3	; 0x03
 a46:	0c 5f       	subi	r16, 0xFC	; 252
 a48:	1f 4f       	sbci	r17, 0xFF	; 255
 a4a:	08 c0       	rjmp	.+16     	; 0xa5c <__stack+0x15d>
 a4c:	60 81       	ld	r22, Z
 a4e:	71 81       	ldd	r23, Z+1	; 0x01
 a50:	07 2e       	mov	r0, r23
 a52:	00 0c       	add	r0, r0
 a54:	88 0b       	sbc	r24, r24
 a56:	99 0b       	sbc	r25, r25
 a58:	0e 5f       	subi	r16, 0xFE	; 254
 a5a:	1f 4f       	sbci	r17, 0xFF	; 255
 a5c:	f3 2d       	mov	r31, r3
 a5e:	ff 76       	andi	r31, 0x6F	; 111
 a60:	3f 2e       	mov	r3, r31
 a62:	97 ff       	sbrs	r25, 7
 a64:	09 c0       	rjmp	.+18     	; 0xa78 <__stack+0x179>
 a66:	90 95       	com	r25
 a68:	80 95       	com	r24
 a6a:	70 95       	com	r23
 a6c:	61 95       	neg	r22
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	f0 68       	ori	r31, 0x80	; 128
 a76:	3f 2e       	mov	r3, r31
 a78:	2a e0       	ldi	r18, 0x0A	; 10
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	a3 01       	movw	r20, r6
 a7e:	0e 94 66 06 	call	0xccc	; 0xccc <__ultoa_invert>
 a82:	88 2e       	mov	r8, r24
 a84:	86 18       	sub	r8, r6
 a86:	45 c0       	rjmp	.+138    	; 0xb12 <__stack+0x213>
 a88:	85 37       	cpi	r24, 0x75	; 117
 a8a:	31 f4       	brne	.+12     	; 0xa98 <__stack+0x199>
 a8c:	23 2d       	mov	r18, r3
 a8e:	2f 7e       	andi	r18, 0xEF	; 239
 a90:	b2 2e       	mov	r11, r18
 a92:	2a e0       	ldi	r18, 0x0A	; 10
 a94:	30 e0       	ldi	r19, 0x00	; 0
 a96:	25 c0       	rjmp	.+74     	; 0xae2 <__stack+0x1e3>
 a98:	93 2d       	mov	r25, r3
 a9a:	99 7f       	andi	r25, 0xF9	; 249
 a9c:	b9 2e       	mov	r11, r25
 a9e:	8f 36       	cpi	r24, 0x6F	; 111
 aa0:	c1 f0       	breq	.+48     	; 0xad2 <__stack+0x1d3>
 aa2:	18 f4       	brcc	.+6      	; 0xaaa <__stack+0x1ab>
 aa4:	88 35       	cpi	r24, 0x58	; 88
 aa6:	79 f0       	breq	.+30     	; 0xac6 <__stack+0x1c7>
 aa8:	b5 c0       	rjmp	.+362    	; 0xc14 <__stack+0x315>
 aaa:	80 37       	cpi	r24, 0x70	; 112
 aac:	19 f0       	breq	.+6      	; 0xab4 <__stack+0x1b5>
 aae:	88 37       	cpi	r24, 0x78	; 120
 ab0:	21 f0       	breq	.+8      	; 0xaba <__stack+0x1bb>
 ab2:	b0 c0       	rjmp	.+352    	; 0xc14 <__stack+0x315>
 ab4:	e9 2f       	mov	r30, r25
 ab6:	e0 61       	ori	r30, 0x10	; 16
 ab8:	be 2e       	mov	r11, r30
 aba:	b4 fe       	sbrs	r11, 4
 abc:	0d c0       	rjmp	.+26     	; 0xad8 <__stack+0x1d9>
 abe:	fb 2d       	mov	r31, r11
 ac0:	f4 60       	ori	r31, 0x04	; 4
 ac2:	bf 2e       	mov	r11, r31
 ac4:	09 c0       	rjmp	.+18     	; 0xad8 <__stack+0x1d9>
 ac6:	34 fe       	sbrs	r3, 4
 ac8:	0a c0       	rjmp	.+20     	; 0xade <__stack+0x1df>
 aca:	29 2f       	mov	r18, r25
 acc:	26 60       	ori	r18, 0x06	; 6
 ace:	b2 2e       	mov	r11, r18
 ad0:	06 c0       	rjmp	.+12     	; 0xade <__stack+0x1df>
 ad2:	28 e0       	ldi	r18, 0x08	; 8
 ad4:	30 e0       	ldi	r19, 0x00	; 0
 ad6:	05 c0       	rjmp	.+10     	; 0xae2 <__stack+0x1e3>
 ad8:	20 e1       	ldi	r18, 0x10	; 16
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <__stack+0x1e3>
 ade:	20 e1       	ldi	r18, 0x10	; 16
 ae0:	32 e0       	ldi	r19, 0x02	; 2
 ae2:	f8 01       	movw	r30, r16
 ae4:	b7 fe       	sbrs	r11, 7
 ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <__stack+0x1f7>
 ae8:	60 81       	ld	r22, Z
 aea:	71 81       	ldd	r23, Z+1	; 0x01
 aec:	82 81       	ldd	r24, Z+2	; 0x02
 aee:	93 81       	ldd	r25, Z+3	; 0x03
 af0:	0c 5f       	subi	r16, 0xFC	; 252
 af2:	1f 4f       	sbci	r17, 0xFF	; 255
 af4:	06 c0       	rjmp	.+12     	; 0xb02 <__stack+0x203>
 af6:	60 81       	ld	r22, Z
 af8:	71 81       	ldd	r23, Z+1	; 0x01
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 5f       	subi	r16, 0xFE	; 254
 b00:	1f 4f       	sbci	r17, 0xFF	; 255
 b02:	a3 01       	movw	r20, r6
 b04:	0e 94 66 06 	call	0xccc	; 0xccc <__ultoa_invert>
 b08:	88 2e       	mov	r8, r24
 b0a:	86 18       	sub	r8, r6
 b0c:	fb 2d       	mov	r31, r11
 b0e:	ff 77       	andi	r31, 0x7F	; 127
 b10:	3f 2e       	mov	r3, r31
 b12:	36 fe       	sbrs	r3, 6
 b14:	0d c0       	rjmp	.+26     	; 0xb30 <__stack+0x231>
 b16:	23 2d       	mov	r18, r3
 b18:	2e 7f       	andi	r18, 0xFE	; 254
 b1a:	a2 2e       	mov	r10, r18
 b1c:	89 14       	cp	r8, r9
 b1e:	58 f4       	brcc	.+22     	; 0xb36 <__stack+0x237>
 b20:	34 fe       	sbrs	r3, 4
 b22:	0b c0       	rjmp	.+22     	; 0xb3a <__stack+0x23b>
 b24:	32 fc       	sbrc	r3, 2
 b26:	09 c0       	rjmp	.+18     	; 0xb3a <__stack+0x23b>
 b28:	83 2d       	mov	r24, r3
 b2a:	8e 7e       	andi	r24, 0xEE	; 238
 b2c:	a8 2e       	mov	r10, r24
 b2e:	05 c0       	rjmp	.+10     	; 0xb3a <__stack+0x23b>
 b30:	b8 2c       	mov	r11, r8
 b32:	a3 2c       	mov	r10, r3
 b34:	03 c0       	rjmp	.+6      	; 0xb3c <__stack+0x23d>
 b36:	b8 2c       	mov	r11, r8
 b38:	01 c0       	rjmp	.+2      	; 0xb3c <__stack+0x23d>
 b3a:	b9 2c       	mov	r11, r9
 b3c:	a4 fe       	sbrs	r10, 4
 b3e:	0f c0       	rjmp	.+30     	; 0xb5e <__stack+0x25f>
 b40:	fe 01       	movw	r30, r28
 b42:	e8 0d       	add	r30, r8
 b44:	f1 1d       	adc	r31, r1
 b46:	80 81       	ld	r24, Z
 b48:	80 33       	cpi	r24, 0x30	; 48
 b4a:	21 f4       	brne	.+8      	; 0xb54 <__stack+0x255>
 b4c:	9a 2d       	mov	r25, r10
 b4e:	99 7e       	andi	r25, 0xE9	; 233
 b50:	a9 2e       	mov	r10, r25
 b52:	09 c0       	rjmp	.+18     	; 0xb66 <__stack+0x267>
 b54:	a2 fe       	sbrs	r10, 2
 b56:	06 c0       	rjmp	.+12     	; 0xb64 <__stack+0x265>
 b58:	b3 94       	inc	r11
 b5a:	b3 94       	inc	r11
 b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__stack+0x267>
 b5e:	8a 2d       	mov	r24, r10
 b60:	86 78       	andi	r24, 0x86	; 134
 b62:	09 f0       	breq	.+2      	; 0xb66 <__stack+0x267>
 b64:	b3 94       	inc	r11
 b66:	a3 fc       	sbrc	r10, 3
 b68:	11 c0       	rjmp	.+34     	; 0xb8c <__stack+0x28d>
 b6a:	a0 fe       	sbrs	r10, 0
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <__stack+0x27b>
 b6e:	b2 14       	cp	r11, r2
 b70:	88 f4       	brcc	.+34     	; 0xb94 <__stack+0x295>
 b72:	28 0c       	add	r2, r8
 b74:	92 2c       	mov	r9, r2
 b76:	9b 18       	sub	r9, r11
 b78:	0e c0       	rjmp	.+28     	; 0xb96 <__stack+0x297>
 b7a:	b2 14       	cp	r11, r2
 b7c:	60 f4       	brcc	.+24     	; 0xb96 <__stack+0x297>
 b7e:	b6 01       	movw	r22, r12
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 b88:	b3 94       	inc	r11
 b8a:	f7 cf       	rjmp	.-18     	; 0xb7a <__stack+0x27b>
 b8c:	b2 14       	cp	r11, r2
 b8e:	18 f4       	brcc	.+6      	; 0xb96 <__stack+0x297>
 b90:	2b 18       	sub	r2, r11
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <__stack+0x299>
 b94:	98 2c       	mov	r9, r8
 b96:	21 2c       	mov	r2, r1
 b98:	a4 fe       	sbrs	r10, 4
 b9a:	10 c0       	rjmp	.+32     	; 0xbbc <__stack+0x2bd>
 b9c:	b6 01       	movw	r22, r12
 b9e:	80 e3       	ldi	r24, 0x30	; 48
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 ba6:	a2 fe       	sbrs	r10, 2
 ba8:	17 c0       	rjmp	.+46     	; 0xbd8 <__stack+0x2d9>
 baa:	a1 fc       	sbrc	r10, 1
 bac:	03 c0       	rjmp	.+6      	; 0xbb4 <__stack+0x2b5>
 bae:	88 e7       	ldi	r24, 0x78	; 120
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <__stack+0x2b9>
 bb4:	88 e5       	ldi	r24, 0x58	; 88
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	b6 01       	movw	r22, r12
 bba:	0c c0       	rjmp	.+24     	; 0xbd4 <__stack+0x2d5>
 bbc:	8a 2d       	mov	r24, r10
 bbe:	86 78       	andi	r24, 0x86	; 134
 bc0:	59 f0       	breq	.+22     	; 0xbd8 <__stack+0x2d9>
 bc2:	a1 fe       	sbrs	r10, 1
 bc4:	02 c0       	rjmp	.+4      	; 0xbca <__stack+0x2cb>
 bc6:	8b e2       	ldi	r24, 0x2B	; 43
 bc8:	01 c0       	rjmp	.+2      	; 0xbcc <__stack+0x2cd>
 bca:	80 e2       	ldi	r24, 0x20	; 32
 bcc:	a7 fc       	sbrc	r10, 7
 bce:	8d e2       	ldi	r24, 0x2D	; 45
 bd0:	b6 01       	movw	r22, r12
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 bd8:	89 14       	cp	r8, r9
 bda:	38 f4       	brcc	.+14     	; 0xbea <__stack+0x2eb>
 bdc:	b6 01       	movw	r22, r12
 bde:	80 e3       	ldi	r24, 0x30	; 48
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 be6:	9a 94       	dec	r9
 be8:	f7 cf       	rjmp	.-18     	; 0xbd8 <__stack+0x2d9>
 bea:	8a 94       	dec	r8
 bec:	f3 01       	movw	r30, r6
 bee:	e8 0d       	add	r30, r8
 bf0:	f1 1d       	adc	r31, r1
 bf2:	80 81       	ld	r24, Z
 bf4:	b6 01       	movw	r22, r12
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 bfc:	81 10       	cpse	r8, r1
 bfe:	f5 cf       	rjmp	.-22     	; 0xbea <__stack+0x2eb>
 c00:	22 20       	and	r2, r2
 c02:	09 f4       	brne	.+2      	; 0xc06 <__stack+0x307>
 c04:	42 ce       	rjmp	.-892    	; 0x88a <vfprintf+0x24>
 c06:	b6 01       	movw	r22, r12
 c08:	80 e2       	ldi	r24, 0x20	; 32
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 c10:	2a 94       	dec	r2
 c12:	f6 cf       	rjmp	.-20     	; 0xc00 <__stack+0x301>
 c14:	f6 01       	movw	r30, r12
 c16:	86 81       	ldd	r24, Z+6	; 0x06
 c18:	97 81       	ldd	r25, Z+7	; 0x07
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <__stack+0x321>
 c1c:	8f ef       	ldi	r24, 0xFF	; 255
 c1e:	9f ef       	ldi	r25, 0xFF	; 255
 c20:	2b 96       	adiw	r28, 0x0b	; 11
 c22:	e2 e1       	ldi	r30, 0x12	; 18
 c24:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__epilogue_restores__>

00000c28 <strnlen_P>:
 c28:	fc 01       	movw	r30, r24
 c2a:	05 90       	lpm	r0, Z+
 c2c:	61 50       	subi	r22, 0x01	; 1
 c2e:	70 40       	sbci	r23, 0x00	; 0
 c30:	01 10       	cpse	r0, r1
 c32:	d8 f7       	brcc	.-10     	; 0xc2a <strnlen_P+0x2>
 c34:	80 95       	com	r24
 c36:	90 95       	com	r25
 c38:	8e 0f       	add	r24, r30
 c3a:	9f 1f       	adc	r25, r31
 c3c:	08 95       	ret

00000c3e <strnlen>:
 c3e:	fc 01       	movw	r30, r24
 c40:	61 50       	subi	r22, 0x01	; 1
 c42:	70 40       	sbci	r23, 0x00	; 0
 c44:	01 90       	ld	r0, Z+
 c46:	01 10       	cpse	r0, r1
 c48:	d8 f7       	brcc	.-10     	; 0xc40 <strnlen+0x2>
 c4a:	80 95       	com	r24
 c4c:	90 95       	com	r25
 c4e:	8e 0f       	add	r24, r30
 c50:	9f 1f       	adc	r25, r31
 c52:	08 95       	ret

00000c54 <fputc>:
 c54:	0f 93       	push	r16
 c56:	1f 93       	push	r17
 c58:	cf 93       	push	r28
 c5a:	df 93       	push	r29
 c5c:	fb 01       	movw	r30, r22
 c5e:	23 81       	ldd	r18, Z+3	; 0x03
 c60:	21 fd       	sbrc	r18, 1
 c62:	03 c0       	rjmp	.+6      	; 0xc6a <fputc+0x16>
 c64:	8f ef       	ldi	r24, 0xFF	; 255
 c66:	9f ef       	ldi	r25, 0xFF	; 255
 c68:	2c c0       	rjmp	.+88     	; 0xcc2 <fputc+0x6e>
 c6a:	22 ff       	sbrs	r18, 2
 c6c:	16 c0       	rjmp	.+44     	; 0xc9a <fputc+0x46>
 c6e:	46 81       	ldd	r20, Z+6	; 0x06
 c70:	57 81       	ldd	r21, Z+7	; 0x07
 c72:	24 81       	ldd	r18, Z+4	; 0x04
 c74:	35 81       	ldd	r19, Z+5	; 0x05
 c76:	42 17       	cp	r20, r18
 c78:	53 07       	cpc	r21, r19
 c7a:	44 f4       	brge	.+16     	; 0xc8c <fputc+0x38>
 c7c:	a0 81       	ld	r26, Z
 c7e:	b1 81       	ldd	r27, Z+1	; 0x01
 c80:	9d 01       	movw	r18, r26
 c82:	2f 5f       	subi	r18, 0xFF	; 255
 c84:	3f 4f       	sbci	r19, 0xFF	; 255
 c86:	31 83       	std	Z+1, r19	; 0x01
 c88:	20 83       	st	Z, r18
 c8a:	8c 93       	st	X, r24
 c8c:	26 81       	ldd	r18, Z+6	; 0x06
 c8e:	37 81       	ldd	r19, Z+7	; 0x07
 c90:	2f 5f       	subi	r18, 0xFF	; 255
 c92:	3f 4f       	sbci	r19, 0xFF	; 255
 c94:	37 83       	std	Z+7, r19	; 0x07
 c96:	26 83       	std	Z+6, r18	; 0x06
 c98:	14 c0       	rjmp	.+40     	; 0xcc2 <fputc+0x6e>
 c9a:	8b 01       	movw	r16, r22
 c9c:	ec 01       	movw	r28, r24
 c9e:	fb 01       	movw	r30, r22
 ca0:	00 84       	ldd	r0, Z+8	; 0x08
 ca2:	f1 85       	ldd	r31, Z+9	; 0x09
 ca4:	e0 2d       	mov	r30, r0
 ca6:	09 95       	icall
 ca8:	89 2b       	or	r24, r25
 caa:	e1 f6       	brne	.-72     	; 0xc64 <fputc+0x10>
 cac:	d8 01       	movw	r26, r16
 cae:	16 96       	adiw	r26, 0x06	; 6
 cb0:	8d 91       	ld	r24, X+
 cb2:	9c 91       	ld	r25, X
 cb4:	17 97       	sbiw	r26, 0x07	; 7
 cb6:	01 96       	adiw	r24, 0x01	; 1
 cb8:	17 96       	adiw	r26, 0x07	; 7
 cba:	9c 93       	st	X, r25
 cbc:	8e 93       	st	-X, r24
 cbe:	16 97       	sbiw	r26, 0x06	; 6
 cc0:	ce 01       	movw	r24, r28
 cc2:	df 91       	pop	r29
 cc4:	cf 91       	pop	r28
 cc6:	1f 91       	pop	r17
 cc8:	0f 91       	pop	r16
 cca:	08 95       	ret

00000ccc <__ultoa_invert>:
 ccc:	fa 01       	movw	r30, r20
 cce:	aa 27       	eor	r26, r26
 cd0:	28 30       	cpi	r18, 0x08	; 8
 cd2:	51 f1       	breq	.+84     	; 0xd28 <__ultoa_invert+0x5c>
 cd4:	20 31       	cpi	r18, 0x10	; 16
 cd6:	81 f1       	breq	.+96     	; 0xd38 <__ultoa_invert+0x6c>
 cd8:	e8 94       	clt
 cda:	6f 93       	push	r22
 cdc:	6e 7f       	andi	r22, 0xFE	; 254
 cde:	6e 5f       	subi	r22, 0xFE	; 254
 ce0:	7f 4f       	sbci	r23, 0xFF	; 255
 ce2:	8f 4f       	sbci	r24, 0xFF	; 255
 ce4:	9f 4f       	sbci	r25, 0xFF	; 255
 ce6:	af 4f       	sbci	r26, 0xFF	; 255
 ce8:	b1 e0       	ldi	r27, 0x01	; 1
 cea:	3e d0       	rcall	.+124    	; 0xd68 <__ultoa_invert+0x9c>
 cec:	b4 e0       	ldi	r27, 0x04	; 4
 cee:	3c d0       	rcall	.+120    	; 0xd68 <__ultoa_invert+0x9c>
 cf0:	67 0f       	add	r22, r23
 cf2:	78 1f       	adc	r23, r24
 cf4:	89 1f       	adc	r24, r25
 cf6:	9a 1f       	adc	r25, r26
 cf8:	a1 1d       	adc	r26, r1
 cfa:	68 0f       	add	r22, r24
 cfc:	79 1f       	adc	r23, r25
 cfe:	8a 1f       	adc	r24, r26
 d00:	91 1d       	adc	r25, r1
 d02:	a1 1d       	adc	r26, r1
 d04:	6a 0f       	add	r22, r26
 d06:	71 1d       	adc	r23, r1
 d08:	81 1d       	adc	r24, r1
 d0a:	91 1d       	adc	r25, r1
 d0c:	a1 1d       	adc	r26, r1
 d0e:	20 d0       	rcall	.+64     	; 0xd50 <__ultoa_invert+0x84>
 d10:	09 f4       	brne	.+2      	; 0xd14 <__ultoa_invert+0x48>
 d12:	68 94       	set
 d14:	3f 91       	pop	r19
 d16:	2a e0       	ldi	r18, 0x0A	; 10
 d18:	26 9f       	mul	r18, r22
 d1a:	11 24       	eor	r1, r1
 d1c:	30 19       	sub	r19, r0
 d1e:	30 5d       	subi	r19, 0xD0	; 208
 d20:	31 93       	st	Z+, r19
 d22:	de f6       	brtc	.-74     	; 0xcda <__ultoa_invert+0xe>
 d24:	cf 01       	movw	r24, r30
 d26:	08 95       	ret
 d28:	46 2f       	mov	r20, r22
 d2a:	47 70       	andi	r20, 0x07	; 7
 d2c:	40 5d       	subi	r20, 0xD0	; 208
 d2e:	41 93       	st	Z+, r20
 d30:	b3 e0       	ldi	r27, 0x03	; 3
 d32:	0f d0       	rcall	.+30     	; 0xd52 <__ultoa_invert+0x86>
 d34:	c9 f7       	brne	.-14     	; 0xd28 <__ultoa_invert+0x5c>
 d36:	f6 cf       	rjmp	.-20     	; 0xd24 <__ultoa_invert+0x58>
 d38:	46 2f       	mov	r20, r22
 d3a:	4f 70       	andi	r20, 0x0F	; 15
 d3c:	40 5d       	subi	r20, 0xD0	; 208
 d3e:	4a 33       	cpi	r20, 0x3A	; 58
 d40:	18 f0       	brcs	.+6      	; 0xd48 <__ultoa_invert+0x7c>
 d42:	49 5d       	subi	r20, 0xD9	; 217
 d44:	31 fd       	sbrc	r19, 1
 d46:	40 52       	subi	r20, 0x20	; 32
 d48:	41 93       	st	Z+, r20
 d4a:	02 d0       	rcall	.+4      	; 0xd50 <__ultoa_invert+0x84>
 d4c:	a9 f7       	brne	.-22     	; 0xd38 <__ultoa_invert+0x6c>
 d4e:	ea cf       	rjmp	.-44     	; 0xd24 <__ultoa_invert+0x58>
 d50:	b4 e0       	ldi	r27, 0x04	; 4
 d52:	a6 95       	lsr	r26
 d54:	97 95       	ror	r25
 d56:	87 95       	ror	r24
 d58:	77 95       	ror	r23
 d5a:	67 95       	ror	r22
 d5c:	ba 95       	dec	r27
 d5e:	c9 f7       	brne	.-14     	; 0xd52 <__ultoa_invert+0x86>
 d60:	00 97       	sbiw	r24, 0x00	; 0
 d62:	61 05       	cpc	r22, r1
 d64:	71 05       	cpc	r23, r1
 d66:	08 95       	ret
 d68:	9b 01       	movw	r18, r22
 d6a:	ac 01       	movw	r20, r24
 d6c:	0a 2e       	mov	r0, r26
 d6e:	06 94       	lsr	r0
 d70:	57 95       	ror	r21
 d72:	47 95       	ror	r20
 d74:	37 95       	ror	r19
 d76:	27 95       	ror	r18
 d78:	ba 95       	dec	r27
 d7a:	c9 f7       	brne	.-14     	; 0xd6e <__ultoa_invert+0xa2>
 d7c:	62 0f       	add	r22, r18
 d7e:	73 1f       	adc	r23, r19
 d80:	84 1f       	adc	r24, r20
 d82:	95 1f       	adc	r25, r21
 d84:	a0 1d       	adc	r26, r0
 d86:	08 95       	ret

00000d88 <__prologue_saves__>:
 d88:	2f 92       	push	r2
 d8a:	3f 92       	push	r3
 d8c:	4f 92       	push	r4
 d8e:	5f 92       	push	r5
 d90:	6f 92       	push	r6
 d92:	7f 92       	push	r7
 d94:	8f 92       	push	r8
 d96:	9f 92       	push	r9
 d98:	af 92       	push	r10
 d9a:	bf 92       	push	r11
 d9c:	cf 92       	push	r12
 d9e:	df 92       	push	r13
 da0:	ef 92       	push	r14
 da2:	ff 92       	push	r15
 da4:	0f 93       	push	r16
 da6:	1f 93       	push	r17
 da8:	cf 93       	push	r28
 daa:	df 93       	push	r29
 dac:	cd b7       	in	r28, 0x3d	; 61
 dae:	de b7       	in	r29, 0x3e	; 62
 db0:	ca 1b       	sub	r28, r26
 db2:	db 0b       	sbc	r29, r27
 db4:	0f b6       	in	r0, 0x3f	; 63
 db6:	f8 94       	cli
 db8:	de bf       	out	0x3e, r29	; 62
 dba:	0f be       	out	0x3f, r0	; 63
 dbc:	cd bf       	out	0x3d, r28	; 61
 dbe:	09 94       	ijmp

00000dc0 <__epilogue_restores__>:
 dc0:	2a 88       	ldd	r2, Y+18	; 0x12
 dc2:	39 88       	ldd	r3, Y+17	; 0x11
 dc4:	48 88       	ldd	r4, Y+16	; 0x10
 dc6:	5f 84       	ldd	r5, Y+15	; 0x0f
 dc8:	6e 84       	ldd	r6, Y+14	; 0x0e
 dca:	7d 84       	ldd	r7, Y+13	; 0x0d
 dcc:	8c 84       	ldd	r8, Y+12	; 0x0c
 dce:	9b 84       	ldd	r9, Y+11	; 0x0b
 dd0:	aa 84       	ldd	r10, Y+10	; 0x0a
 dd2:	b9 84       	ldd	r11, Y+9	; 0x09
 dd4:	c8 84       	ldd	r12, Y+8	; 0x08
 dd6:	df 80       	ldd	r13, Y+7	; 0x07
 dd8:	ee 80       	ldd	r14, Y+6	; 0x06
 dda:	fd 80       	ldd	r15, Y+5	; 0x05
 ddc:	0c 81       	ldd	r16, Y+4	; 0x04
 dde:	1b 81       	ldd	r17, Y+3	; 0x03
 de0:	aa 81       	ldd	r26, Y+2	; 0x02
 de2:	b9 81       	ldd	r27, Y+1	; 0x01
 de4:	ce 0f       	add	r28, r30
 de6:	d1 1d       	adc	r29, r1
 de8:	0f b6       	in	r0, 0x3f	; 63
 dea:	f8 94       	cli
 dec:	de bf       	out	0x3e, r29	; 62
 dee:	0f be       	out	0x3f, r0	; 63
 df0:	cd bf       	out	0x3d, r28	; 61
 df2:	ed 01       	movw	r28, r26
 df4:	08 95       	ret

00000df6 <_exit>:
 df6:	f8 94       	cli

00000df8 <__stop_program>:
 df8:	ff cf       	rjmp	.-2      	; 0xdf8 <__stop_program>
